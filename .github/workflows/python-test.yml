---
# This workflow will install Python dependencies, run tests and lint with a
# variety of Python versions
# For more information see:
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python

# yamllint disable rule:truthy
on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  checks: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
        poetry-version: [1.5.1]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Install dependencies
        run: |
          poetry install
      - name: Test with pytest
        run: |
          make test

      # we want to make test-results.xml an artifact
      - name: Archive test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results.xml

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          annotate_notice: true
          check_title_template: '{{SUITE_NAME}} {{TEST_NAME}}'
          detailed_summary: true
          fail_on_failure: true
          include_passed: true
          report_paths: '**/test-results.xml'
          require_tests: true
          summary: true

      - name: Surface failing tests
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          # A list of JUnit XML files, directories containing the former, and
          # wildcard
          # patterns to process.
          # See @actions/glob for supported patterns.
          path: test-results.xml

          # Add a summary of the results at the top of the report
          # Default: true
          summary: true

          # Select which results should be included in the report.
          # Follows the same syntax as
          # `pytest -r`
          # Default: fEX
          display-options: fEX

          # Fail the workflow if no JUnit XML was found.
          # Default: true
          fail-on-empty: true
